// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adminUsersFieldNames          = builder.RawFieldNames(&AdminUsers{})
	adminUsersRows                = strings.Join(adminUsersFieldNames, ",")
	adminUsersRowsExpectAutoSet   = strings.Join(stringx.Remove(adminUsersFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	adminUsersRowsWithPlaceHolder = strings.Join(stringx.Remove(adminUsersFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheSupport3AdminUsersIdPrefix       = "cache:support3:adminUsers:id:"
	cacheSupport3AdminUsersUsernamePrefix = "cache:support3:adminUsers:username:"
)

type (
	adminUsersModel interface {
		Insert(ctx context.Context, data *AdminUsers) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AdminUsers, error)
		FindOneByUsername(ctx context.Context, username string) (*AdminUsers, error)
		Update(ctx context.Context, newData *AdminUsers) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAdminUsersModel struct {
		sqlc.CachedConn
		table string
	}

	AdminUsers struct {
		Id            int64          `db:"id"`       // 用户ID
		Username      string         `db:"username"` // 用户名
		Email         string         `db:"email"`    // 邮箱
		Password      string         `db:"password"`
		Name          string         `db:"name"`           // 联系电话
		Mobile        string         `db:"mobile"`         // 手机号码
		DingId        sql.NullString `db:"ding_id"`        // 钉钉ID
		DepartmentId  sql.NullInt64  `db:"department_id"`  // 部门ID
		IsDeptLeader  sql.NullInt64  `db:"is_dept_leader"` // 0普通员工，1负责人
		Avatar        string         `db:"avatar"`         // 头像
		RememberToken sql.NullString `db:"remember_token"`
		Status        int64          `db:"status"` // 状态 1正常 0禁用
		CreatedAt     sql.NullTime   `db:"created_at"`
		UpdatedAt     sql.NullTime   `db:"updated_at"`
		LastloginAt   time.Time      `db:"lastlogin_at"`
	}
)

func newAdminUsersModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAdminUsersModel {
	return &defaultAdminUsersModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`admin_users`",
	}
}

func (m *defaultAdminUsersModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	support3AdminUsersIdKey := fmt.Sprintf("%s%v", cacheSupport3AdminUsersIdPrefix, id)
	support3AdminUsersUsernameKey := fmt.Sprintf("%s%v", cacheSupport3AdminUsersUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, support3AdminUsersIdKey, support3AdminUsersUsernameKey)
	return err
}

func (m *defaultAdminUsersModel) FindOne(ctx context.Context, id int64) (*AdminUsers, error) {
	support3AdminUsersIdKey := fmt.Sprintf("%s%v", cacheSupport3AdminUsersIdPrefix, id)
	var resp AdminUsers
	err := m.QueryRowCtx(ctx, &resp, support3AdminUsersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adminUsersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminUsersModel) FindOneByUsername(ctx context.Context, username string) (*AdminUsers, error) {
	support3AdminUsersUsernameKey := fmt.Sprintf("%s%v", cacheSupport3AdminUsersUsernamePrefix, username)
	var resp AdminUsers
	err := m.QueryRowIndexCtx(ctx, &resp, support3AdminUsersUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", adminUsersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminUsersModel) Insert(ctx context.Context, data *AdminUsers) (sql.Result, error) {
	support3AdminUsersIdKey := fmt.Sprintf("%s%v", cacheSupport3AdminUsersIdPrefix, data.Id)
	support3AdminUsersUsernameKey := fmt.Sprintf("%s%v", cacheSupport3AdminUsersUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, adminUsersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.Email, data.Password, data.Name, data.Mobile, data.DingId, data.DepartmentId, data.IsDeptLeader, data.Avatar, data.RememberToken, data.Status, data.CreatedAt, data.UpdatedAt, data.LastloginAt)
	}, support3AdminUsersIdKey, support3AdminUsersUsernameKey)
	return ret, err
}

func (m *defaultAdminUsersModel) Update(ctx context.Context, newData *AdminUsers) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	support3AdminUsersIdKey := fmt.Sprintf("%s%v", cacheSupport3AdminUsersIdPrefix, data.Id)
	support3AdminUsersUsernameKey := fmt.Sprintf("%s%v", cacheSupport3AdminUsersUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, adminUsersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Username, newData.Email, newData.Password, newData.Name, newData.Mobile, newData.DingId, newData.DepartmentId, newData.IsDeptLeader, newData.Avatar, newData.RememberToken, newData.Status, newData.CreatedAt, newData.UpdatedAt, newData.LastloginAt, newData.Id)
	}, support3AdminUsersIdKey, support3AdminUsersUsernameKey)
	return err
}

func (m *defaultAdminUsersModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSupport3AdminUsersIdPrefix, primary)
}

func (m *defaultAdminUsersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adminUsersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAdminUsersModel) tableName() string {
	return m.table
}
