// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	houseFieldNames          = builder.RawFieldNames(&House{})
	houseRows                = strings.Join(houseFieldNames, ",")
	houseRowsExpectAutoSet   = strings.Join(stringx.Remove(houseFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	houseRowsWithPlaceHolder = strings.Join(stringx.Remove(houseFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheGinVueAdminHouseIdPrefix = "cache:ginVueAdmin:house:id:"
)

type (
	houseModel interface {
		Insert(ctx context.Context, data *House) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*House, error)
		GetAllByArea(ctx context.Context, area string, limit int64) ([]*House, error)
		Update(ctx context.Context, newData *House) error
		Delete(ctx context.Context, id int64) error
	}

	defaultHouseModel struct {
		sqlc.CachedConn
		table string
	}

	House struct {
		Id          int64          `db:"id"`           // id
		CreatedBy   sql.NullString `db:"created_by"`   // 创建人
		CreatedTime sql.NullTime   `db:"created_time"` // 创建时间
		UpdatedBy   sql.NullString `db:"updated_by"`   // 更新人
		UpdatedTime sql.NullTime   `db:"updated_time"` // 更新时间
		DeletedTime sql.NullTime   `db:"deleted_time"` // 删除时间
		Date        string   `db:"date"`
		Area        string         `db:"area"` // 区域
		RoomArea    sql.NullString `db:"room_area"`
		RoomNumber  int64  `db:"room_number"`
		Memo        sql.NullString `db:"memo"`
	}
)

func newHouseModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultHouseModel {
	return &defaultHouseModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`house`",
	}
}

func (m *defaultHouseModel) Delete(ctx context.Context, id int64) error {
	ginVueAdminHouseIdKey := fmt.Sprintf("%s%v", cacheGinVueAdminHouseIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ginVueAdminHouseIdKey)
	return err
}

func (m *defaultHouseModel) FindOne(ctx context.Context, id int64) (*House, error) {
	ginVueAdminHouseIdKey := fmt.Sprintf("%s%v", cacheGinVueAdminHouseIdPrefix, id)
	var resp House
	err := m.QueryRowCtx(ctx, &resp, ginVueAdminHouseIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", houseRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHouseModel) GetAllByArea(ctx context.Context, area string,limit int64) ([]*House, error) {
	// ginVueAdminHouseIdKey := fmt.Sprintf("%s%v", area, area)

	var resp []*House
	query := fmt.Sprintf("select %s from %s where `area` = ? order by date desc limit ?",houseRows,m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query,area,limit)
	println(err)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHouseModel) Insert(ctx context.Context, data *House) (sql.Result, error) {
	ginVueAdminHouseIdKey := fmt.Sprintf("%s%v", cacheGinVueAdminHouseIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, houseRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CreatedBy, data.CreatedTime, data.UpdatedBy, data.UpdatedTime, data.DeletedTime, data.Date, data.Area, data.RoomArea, data.RoomNumber, data.Memo)
	}, ginVueAdminHouseIdKey)
	return ret, err
}

func (m *defaultHouseModel) Update(ctx context.Context, data *House) error {
	ginVueAdminHouseIdKey := fmt.Sprintf("%s%v", cacheGinVueAdminHouseIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, houseRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CreatedBy, data.CreatedTime, data.UpdatedBy, data.UpdatedTime, data.DeletedTime, data.Date, data.Area, data.RoomArea, data.RoomNumber, data.Memo, data.Id)
	}, ginVueAdminHouseIdKey)
	return err
}

func (m *defaultHouseModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGinVueAdminHouseIdPrefix, primary)
}

func (m *defaultHouseModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", houseRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultHouseModel) tableName() string {
	return m.table
}
